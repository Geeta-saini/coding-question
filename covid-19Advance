const express = require('express')

const {open} = require('sqlite')
const sqlite3 = require('sqlite3')
const bcrypt = require('bcrypt')
const jwt = require('jsonwebtoken')

const path = require('path')
const dbPath = path.join(__dirname, 'covid19IndiaPortal.db')

const app = express()
app.use(express.json())
module.exports = app

let db = null
const initializeDBAndServer = async () => {
  try {
    db = await open({
      filename: dbPath,
      driver: sqlite3.Database,
    })
    app.listen(3000, () =>
      console.log('Server Running at http://localhost:3000/'),
    )
  } catch (e) {
    console.log(`DB Error: ${e.message}`)
    process.exit(1)
  }
}

initializeDBAndServer()
const convertStateObjectToResponseObject = dbObject => {
  return {
    stateId: dbObject.state_id,
    stateName: dbObject.state_name,
    population: dbObject.population,
  }
}
const convertDistrictObjectToResponseObject = dbObject => {
  return {
    districtId: dbObject.district_id,
    districtName: dbObject.district_name,
    stateId: dbObject.state_id,
    cases: dbObject.cases,
    cured: dbObject.cured,
    active: dbObject.active,
    deaths: dbObject.deaths,
  }
}

function authenticationToken(request, response, next) {
  let jwtToken
  const authHeader = request.headers['authorization']
  if (authHeader !== undefined) {
    jwtToken = authHeader.split(' ')[1]
  }
  if (jwtToken === undefined) {
    response.status(401)
    response.send('Invalid JWT Token')
  } else {
    jwt.verify(jwtToken, 'MY_SECRET_TOKEN', async (error, payload) => {
      if (error) {
        response.status(401)
        response.send('Invalid JWT Token')
      } else {
        next()
      }
    })
  }
}

//API-1
app.post('/login/', async (request, response) => {
  const {username, password} = request.body

  let checkUsername = `
            SELECT *
            FROM user
            WHERE username = '${username}';`
  const dbUser = await db.get(checkUsername)
  if (dbUser === undefined) {
    response.status(400)
    response.send('Invalid user')
  } else {
    const isPasswordMatched = await bcrypt.compare(password, dbUser.password)
    if (isPasswordMatched === true) {
      const payload = {
        username: username,
      }
      const jwtToken = jwt.sign(payload, 'MY_SECRET_TOKEN')
      response.send({jwtToken})
    } else {
      response.status(400)
      response.send('Invalid password')
    }
  }
})
//API-2
app.get('/states/', authenticationToken, async (request, response) => {
  const getStateQuery = `
  SELECT 
  * 
  FROM 
  state;`
  const stateArray = await db.all(getStateQuery)
  response.send(
    stateArray.map(each => convertStateObjectToResponseObject(each)),
  )
})

//API-3
app.get('/states/:stateId/', authenticationToken, async (request, response) => {
  const {stateId} = request.params
  const getStateQuery = `
    SELECT
      *
    FROM
      state
      WHERE
      state_Id = ${stateId};`
  const stateArray = await db.get(getStateQuery)
  response.send(convertStateObjectToResponseObject(stateArray))
})

//API-4
app.post('/districts/', authenticationToken, async (request, response) => {
  const {districtName, stateId, cases, cured, active, deaths} = request.body

  const postDistrictQuery = `
    INSERT INTO
      district (district_name,state_id,cases,cured,active,deaths)

      VALUES ('${districtName}', ${stateId}, ${cases},${cured},${active},${deaths});`

  const disrtict = await db.run(postDistrictQuery)

  response.send('District Successfully Added')
})

//API-5
app.get(
  '/districts/:districtId/',
  authenticationToken,
  async (request, response) => {
    const {districtId} = request.params
    const getDistrictQuery = `
    SELECT
      *
    FROM
      district
      WHERE
      district_id = ${districtId};`
    const district = await db.get(getDistrictQuery)
    response.send(convertDistrictObjectToResponseObject(district))
  },
)
//API-6
app.delete(
  '/districts/:districtId/',
  authenticationToken,
  async (request, response) => {
    const {districtId} = request.params

    const deleteDistrictQuery = `
    DELETE FROM
      district
    WHERE
      district_id = ${districtId};`

    const districtDEl = await db.run(deleteDistrictQuery)

    response.send('District Removed')
  },
)

//API-6

app.put(
  '/districts/:districtId/',
  authenticationToken,
  async (request, response) => {
    const {districtName, stateId, cases, cured, active, deaths} = request.body
    const {districtId} = request.params
    const updatedistrictQuery = `
    UPDATE
      district
      SET
      district_name = '${districtName}',
  state_id= ${stateId},
  cases = ${cases},
  cured=${cured},
  active = ${active},
  deaths = ${deaths}
      WHERE
      district_id=${districtId};`

    const player = await db.run(updatedistrictQuery)

    response.send('District Details Updated')
  },
)
//API-7

app.get(
  '/states/:stateId/stats/',
  authenticationToken,
  async (request, response) => {
    const {stateId} = request.params
    const getStateStatsQuery = `
    SELECT
      SUM(cases) as totalCases,
      SUM(cured) as totalCured,
      SUM(active)as totalActive,
      SUM(deaths) as totalDeaths
    FROM
      district
      WHERE
      state_id = ${stateId};`

    const statsArray = await db.get(getStateStatsQuery)

    response.send(statsArray)
  },
)




request:

POST http://localhost:3000/login/
Content-Type:application/json

{
  "username": "christopher_phillips",
  "password": "christy@123"
}
###
POST http://localhost:3000/login/
Content-Type:application/json

{
  "username": "christopher",
  "password": "christy@"
}
###
POST http://localhost:3000/login/
Content-Type:application/json

{
  "username": "christopher_phillips",
  "password": "christy@"
}
###
GET http://localhost:3000/states/
Authorization: bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImNocmlzdG9waGVyX3BoaWxsaXBzIiwiaWF0IjoxNzI0NTIxMDY4fQ.GEzkb_UEIJWWcRiSWhB7dQGxYZudIDoLeX9f9B4QuY0



###
GET http://localhost:3000/states/8/
Authorization: bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImNocmlzdG9waGVyX3BoaWxsaXBzIiwiaWF0IjoxNzI0NTIxMDY4fQ.GEzkb_UEIJWWcRiSWhB7dQGxYZudIDoLeX9f9B4QuY0



###

POST http://localhost:3000/districts/
Content-Type:application/json
Authorization: bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImNocmlzdG9waGVyX3BoaWxsaXBzIiwiaWF0IjoxNzI0NTIxMDY4fQ.GEzkb_UEIJWWcRiSWhB7dQGxYZudIDoLeX9f9B4QuY0



{
  "districtName": "Bagalkot",
  "stateId": 3,
  "cases": 2323,
  "cured": 2000,
  "active": 315,
  "deaths": 8
}

###
GET http://localhost:3000//districts/322/
Authorization: bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImNocmlzdG9waGVyX3BoaWxsaXBzIiwiaWF0IjoxNzI0NTIxMDY4fQ.GEzkb_UEIJWWcRiSWhB7dQGxYZudIDoLeX9f9B4QuY0



###
DELETE http://localhost:3000/districts/441/
Authorization: bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImNocmlzdG9waGVyX3BoaWxsaXBzIiwiaWF0IjoxNzI0NTIxMDY4fQ.GEzkb_UEIJWWcRiSWhB7dQGxYZudIDoLeX9f9B4QuY0



###
PUT http://localhost:3000/districts/712/
Content-Type: application/json 
Authorization: bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImNocmlzdG9waGVyX3BoaWxsaXBzIiwiaWF0IjoxNzI0NTIxMDY4fQ.GEzkb_UEIJWWcRiSWhB7dQGxYZudIDoLeX9f9B4QuY0



{
  "districtName": "Nadia",
  "stateId": 3,
  "cases": 9628,
  "cured": 6524,
  "active": 3000,
  "deaths": 104
}
GET http://localhost:3000/states/36/stats/
Authorization: bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImNocmlzdG9waGVyX3BoaWxsaXBzIiwiaWF0IjoxNzI0NTIxMDY4fQ.GEzkb_UEIJWWcRiSWhB7dQGxYZudIDoLeX9f9B4QuY0

