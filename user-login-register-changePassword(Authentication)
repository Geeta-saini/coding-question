const express = require('express')

const {open} = require('sqlite')
const sqlite3 = require('sqlite3')
const bcrypt = require('bcrypt')

const path = require('path')
const dbPath = path.join(__dirname, 'userData.db')

const app = express()
app.use(express.json())
module.exports = app

let db = null
const initializeDBAndServer = async () => {
  try {
    db = await open({
      filename: dbPath,
      driver: sqlite3.Database,
    })
    app.listen(3000, () =>
      console.log('Server Running at http://localhost:3000/'),
    )
  } catch (e) {
    console.log(`DB Error: ${e.message}`)
    process.exit(1)
  }
}

initializeDBAndServer()

app.post('/register/', async (request, response) => {
  const {username, name, password, gender, location} = request.body
  const hashedPassword = await bcrypt.hash(password, 10)
  let checkUsername = `
            SELECT *
            FROM user
            WHERE username = '${username}';`
  const dbUser = await db.get(checkUsername)
  if (dbUser === undefined) {
    let createUserQuery = `
            INSERT INTO
            user (username,name,password,gender,location)
            VALUES (
                '${username}',
                '${name}',
                '${hashedPassword}',
                '${gender}',
                '${location}'
            );`
    if (password.length < 5) {
      response.status(400)
      response.send('Password is too short')
    } else {
      let newUserDetails = await db.run(createUserQuery)
      response.status(200)
      response.send('User created successfully')
    }
  } else {
    response.status(400)
    response.send('User already exists')
  }
})
//API-2
app.post('/login/', async (request, response) => {
  const {username, password} = request.body

  let checkUsername = `
            SELECT *
            FROM user
            WHERE username = '${username}';`
  const dbUser = await db.get(checkUsername)
  if (dbUser === undefined) {
    response.status(400)
    response.send('Invalid user')
  } else {
    const isPasswordMatched = await bcrypt.compare(password, dbUser.password)
    if (isPasswordMatched === true) {
      response.send('Login success!')
    } else {
      response.status(400)
      response.send('Invalid password')
    }
  }
})
//API-3

app.put('/change-password/', async (request, response) => {
  const {username, oldPassword, newPassword} = request.body
  let checkUsername = `
            SELECT *
            FROM user
            WHERE username = '${username}';`
  const dbUser = await db.get(checkUsername)
  if (dbUser === undefined) {
    response.status(400)
    response.send('User not registered')
  } else {
    const isPasswordValid = await bcrypt.compare(oldPassword, dbUser.password)
    if (isPasswordValid === true) {
      const newpasswordLenght = newPassword.length
      if (newpasswordLenght < 5) {
        response.status(400)
        response.send('Password is too short')
      } else {
        const enycryptedPwd = await bcrypt.hash(newPassword, 10)
        const updatedPassword = `
        update user
        set password="${enycryptedPwd}"
        where username = "${username}"
        `
        await db.run(updatedPassword)
        response.send('Password updated')
      }
    } else {
      response.status(400)
      response.send('Invalid current password')
    }
  }
})




//APIS

POST http://localhost:3000/register/
Content-Type:application/json

{
  "username": "adam_richard",
  "name": "Adam Richard",
  "password": "richard_567",
  "gender": "male",
  "location": "Detroit"

}
###
POST http://localhost:3000/register/
Content-Type:application/json

{
  "username": "xyz",
  "name": "lmn ",
  "password": "rich-666",
  "gender": "male",
  "location": "Detroit"
}

###
POST http://localhost:3000/login/
Content-Type:application/json

{
  "username": "adam_richard",
  "password": "richard_567"
}
###
POST http://localhost:3000/login/
Content-Type:application/json

{
  "username": "afg",
  "password": "richard_567\\"
}
###
POST http://localhost:3000/login/
Content-Type:application/json

{
  "username": "adam_richard",
  "password": "richard"
}

###
PUT http://localhost:3000/change-password/
Content-Type:application/json

{
  "username": "adam_richard",
  "oldPassword": "richard",
  "newPassword": "richard@123"
}
