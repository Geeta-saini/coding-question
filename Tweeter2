const express = require('express')

const {open} = require('sqlite')
const sqlite3 = require('sqlite3')
const bcrypt = require('bcrypt')
const jwt = require('jsonwebtoken')

const path = require('path')
const dbPath = path.join(__dirname, 'twitterClone.db')

const app = express()
app.use(express.json())
module.exports = app

let db = null
const initializeDBAndServer = async () => {
  try {
    db = await open({
      filename: dbPath,
      driver: sqlite3.Database,
    })
    app.listen(3000, () => {
      console.log('Server Running at http://localhost:3000/')
    })
  } catch (e) {
    console.log(`DB Error: ${e.message}`)
    process.exit(1)
  }
}

initializeDBAndServer()
const getFollowingPeopleIdsOfUser = async username => {
  const getFollowingPeopleQuery = `select following_user_id FROM follower
  INNER JOIN user On user.user_id = follower.follower_user_id
  where user.username='${username}';`

  const followingPeople = await db.all(getFollowingPeopleQuery)
  const arrayOfIds = followingPeople.map(each => each.following_user_id)
  return arrayOfIds
}
//jwt token verification
const authenticateToken = (request, response, next) => {
  let jwtToken
  const authHeader = request.headers['authorization']
  if (authHeader) {
    jwtToken = authHeader.split(' ')[1]
  }
  if (jwtToken) {
    jwt.verify(jwtToken, 'MY_SECRET_TOKEN', async (error, payload) => {
      if (error) {
        response.status(401)
        response.send('Invalid JWT Token')
      } else {
        request.username = payload.username
        request.userId = payload.userId
        next()
      }
    })
  } else {
    response.status(401)
    response.send('Invalid JWT Token')
  }
}

//tweet Access
const tweetAccessVerification = async (request, response, next) => {
  const {userId} = request
  const {tweetId} = request.params
  const getTweetQuery = `
  SELECT
  * from 
  tweet INNER JOIN follower
  ON tweet.user_id = follower.following_user_id
  WHERE tweet.tweet_id = '${tweetId}' AND follower_user_id = '${userId}';
  `
  const tweet = await db.get(getTweetQuery)
  console.log(tweet)
  if (tweet === undefined) {
    response.status(401)
    response.send('Invalid Request')
  } else {
    next()
  }
}

//register user API-1

app.post('/register/', async (request, response) => {
  const {username, password, name, gender} = request.body
  let checkUsername = `
            SELECT *
            FROM user
            WHERE username = '${username}';`

  const dbUser = await db.get(checkUsername)
  if (dbUser) {
    response.status(400).send('User already exists')
  } else {
    if (password.length < 6) {
      response.status(400).send('Password is too short')
    } else {
      const hashedPassword = await bcrypt.hash(password, 10)

      const createUserQuery = `
            INSERT INTO
            user (username,password, name,gender)
            VALUES (
               '${username}',
                '${hashedPassword}',
                '${name}',
                '${gender}'
            );`

      await db.run(createUserQuery)
      response.send('User created successfully')
    }
  }
})

//API-2
app.post('/login/', async (request, response) => {
  const {username, password} = request.body

  let checkUsername = `
            SELECT *
            FROM user
            WHERE username = '${username}';`
  const dbUser = await db.get(checkUsername)
  if (!dbUser) {
    response.status(400).send('Invalid user')
  } else {
    const isPasswordMatched = await bcrypt.compare(password, dbUser.password)
    if (isPasswordMatched) {
      const payload = {
        username,
        userId: dbUser.user_Id,
      }
      const jwtToken = jwt.sign(payload, 'MY_SECRET_TOKEN')
      response.send({jwtToken})
    } else {
      response.status(400).send('Invalid password')
    }
  }
})
//API-3
app.get('/user/tweets/feed/', authenticateToken, async (request, response) => {
  const {username} = request
  const followingPeopleIds = await getFollowingPeopleIdsOfUser(username)
  const getTweetsFeedQuery = `
  SELECT 
  username,
  tweet,
  date_time AS dateTime
  FROM 
  user INNER JOIN tweet ON user.user_id = tweet.user_id 
  where 
  user.user_id IN (${followingPeopleIds});
  order by 
  date_time DESC
  limit 4`
  const tweetFeedArray = await db.all(getTweetsFeedQuery)
  response.send(tweetFeedArray)
})
//API_4
app.get('/user/following/', authenticateToken, async (request, response) => {
  const {username, userId} = request
  const getUserFollowsQuery = `
  SELECT 
  name
  FROM 
  follower INNER JOIN user ON user.user_id = follower.following_user_id
  where 
  follower_user_id ='${userId}';`
  const userFollowsArray = await db.all(getUserFollowsQuery)
  response.send(userFollowsArray)
})
//API-5
app.get('/user/followers/', authenticateToken, async (request, response) => {
  const {username, userId} = request
  const getFollowerQuery = `
      SELECT 
        DISTINCT name 
      FROM 
        follower INNER JOIN user ON user.user_id = follower.follower_user_id
  where 
  following_user_id = "${userId}";`
  const userFollowerArray = await db.all(getFollowerQuery)
  response.send(userFollowerArray)
})
//API-6
app.get('/tweets/:tweetId/', authenticateToken, async (request, response) => {
  const {username, userId} = request
  const {tweetId} = request.params
  const getTweetQuery = `
      SELECT 
        tweet, (SELECT COUNT() FROM like WHERE tweet_id ='${tweetId}')AS likes,
        (SELECT COUNT() FROM reply WHERE tweet_id = '${tweetId}') AS replies,
        date_time AS dateTime
        from tweet
        WHERE tweet.tweet_id = '${tweetId}'
        `
  const tweet = await db.all(getTweetQuery)
  response.send(tweet)
})

//API-7
app.get(
  '/tweets/:tweetId/likes/',
  authenticateToken,
  tweetAccessVerification,
  async (request, response) => {
    const {username, userId} = request
    const {tweetId} = request.params
    const getLikesQuery = `
      SELECT 
        username from user INNER JOIN like On user.user_id = like.user_id
        WHERE tweet_id = '${tweetId}'
        `
    const likedUser = await db.all(getLikesQuery)
    const userArray = likedUser.map(each => each.username)
    response.send({likes: userArray})
  },
)

//API-8
app.get(
  '/tweets/:tweetId/replies/',
  authenticateToken,
  tweetAccessVerification,
  async (request, response) => {
    const {tweetId} = request.params
    const getReplyQuery = `
      SELECT 
        name,reply from user INNER JOIN reply On user.user_id = reply.user_id
        WHERE tweet_id = '${tweetId}'
        `
    const repliedUser = await db.all(getReplyQuery)

    response.send({replies: repliedUser})
  },
)

//API-9
app.get('/user/tweets/', authenticateToken, async (request, response) => {
  const {userId} = request
  const getTweetsQuery = `
      SELECT 
        tweet,
         COUNT(DISTINCT like_id) AS likes,
        COUNT(DISTINCT reply_id) AS replies,
        date_time AS dateTime
        from tweet LEFT JOIN reply ON tweet.tweet_id = reply.tweet_id
        LEFT JOIN like ON tweet.tweet_id = like.tweet_id
        WHERE tweet.user_id = '${userId}'
        GROUP BY tweet.tweet_id;
        `
  const tweets = await db.all(getTweetsQuery)
  response.send(tweets)
})

//API-10
app.post('/user/tweets/', authenticateToken, async (request, response) => {
  const {tweet} = request.body
  const userId = parseInt(request.userId)
  const dateTime = new Date().toJSON().substring(0, 19).replace('T', ' ')

  const createTweetQuery = `
      INSERT INTO tweet(tweet,user_id,date_time)
      values('${tweet}','${userId}','${dateTime}')
        `
  await db.all(createTweetQuery)
  response.send('Created a Tweet')
})

//API-11
app.delete(
  '/tweets/:tweetId/',
  authenticateToken,
  async (request, response) => {
    const {tweetId} = request.params
    const {userId} = request
    const getTheTweetQuery = `
  SELECT* from tweet WHERE user_id = '${userId}'AND tweet_id='${tweetId}'
  `
    const tweet = await db.get(getTheTweetQuery)
    console.log(tweet)
    if (tweet === undefined) {
      response.status(401)
      response.send('Invalid Request')
    } else {
      const deletequery = `DELETE FROM tweet WHERE tweet_id = '${tweetId}' AND user_id='${userId}';`
      await db.run(deletequery)
      response.send('Tweet Removed')
    }
  },
)




//APIs

API-1
POST http://localhost:3000/register/
Content-Type:application/json

{
  "username": "adam_richard",
  "password": "richard_567",
  "name": "Adam Richard",
  "gender": "male"
}

API-2
###
POST http://localhost:3000/login/
Content-Type:application/json

{
  "username":"JoeBiden",
  "password":"biden@123"
}

API-3
###
GET http://localhost:3000/user/tweets/feed/
Authorization: bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IkpvZUJpZGVuIiwiaWF0IjoxNzI3MzcxNTAzfQ.dciwq4IOJTL-K3Ckar4zPEkYtj9KYypjtJ8keFCO6sw
API-4
###
GET http://localhost:3000/user/following/
Authorization: bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IkpvZUJpZGVuIiwiaWF0IjoxNzI3MzcxNTAzfQ.dciwq4IOJTL-K3Ckar4zPEkYtj9KYypjtJ8keFCO6sw

API-5
###
GET http://localhost:3000/user/followers/
Authorization: bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IkpvZUJpZGVuIiwiaWF0IjoxNzI3Mzc2MDU5fQ.-5qYXsRrlN430E8ZJnjEdOV1trArPFY5QEasR8F1Uks

API-6
###
GET http://localhost:3000/tweets/3/
Authorization: bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IkpvZUJpZGVuIiwiaWF0IjoxNzI3MzcxNTAzfQ.dciwq4IOJTL-K3Ckar4zPEkYtj9KYypjtJ8keFCO6sw

API-7
###
GET http://localhost:3000/tweets/3/likes/
Authorization: bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IkpvZUJpZGVuIiwiaWF0IjoxNzI3MzcxNTAzfQ.dciwq4IOJTL-K3Ckar4zPEkYtj9KYypjtJ8keFCO6sw

API-8
###
GET http://localhost:3000/tweets/:4/replies/
Authorization: bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IkpvZUJpZGVuIiwiaWF0IjoxNzI3MzcxNTAzfQ.dciwq4IOJTL-K3Ckar4zPEkYtj9KYypjtJ8keFCO6sw

API-9
###
GET http://localhost:3000/user/tweets/
Authorization: bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IkpvZUJpZGVuIiwiaWF0IjoxNzI3MzcxNTAzfQ.dciwq4IOJTL-K3Ckar4zPEkYtj9KYypjtJ8keFCO6sw

API-10
###
POST http://localhost:3000/user/tweets/
Authorization: bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IkpvZUJpZGVuIiwiaWF0IjoxNzI3MzcxNTAzfQ.dciwq4IOJTL-K3Ckar4zPEkYtj9KYypjtJ8keFCO6sw
{
   "tweet": "The Mornings..."
}

API-11
###
DELETE http://localhost:3000/tweets/15/
Authorization: bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IkpvZUJpZGVuIiwiaWF0IjoxNzI3MzcxNTAzfQ.dciwq4IOJTL-K3Ckar4zPEkYtj9KYypjtJ8keFCO6sw
