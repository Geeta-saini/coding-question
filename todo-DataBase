const express = require('express')

const {open} = require('sqlite')
const sqlite3 = require('sqlite3')

const path = require('path')
const dbPath = path.join(__dirname, 'todoApplication.db')

const app = express()
app.use(express.json())
module.exports = app

let db = null
const initializeDBAndServer = async () => {
  try {
    db = await open({
      filename: dbPath,
      driver: sqlite3.Database,
    })
    app.listen(3000, () =>
      console.log('Server Running at http://localhost:3000/'),
    )
  } catch (e) {
    console.log(`DB Error: ${e.message}`)
    process.exit(1)
  }
}

initializeDBAndServer()

const hasPriorityAndStatusProperties = requestQuery => {
  return (
    requestQuery.priority !== undefined && requestQuery.status !== undefined
  )
}

const hasPriorityProperty = requestQuery => {
  return requestQuery.priority !== undefined
}

const hasStatusProperty = requestQuery => {
  return requestQuery.status !== undefined
}
//API-1
app.get('/todos/', async (request, response) => {
  let data = null
  let getTodosQuery = ''
  const {search_q = '', priority, status} = request.query

  switch (true) {
    case hasPriorityAndStatusProperties(request.query): //if this is true then below query is taken in the code
      getTodosQuery = `
   SELECT
    *
   FROM
    todo 
   WHERE
    todo LIKE '%${search_q}%'
    AND status = '${status}'
    AND priority = '${priority}';`
      break
    case hasPriorityProperty(request.query):
      getTodosQuery = `
   SELECT
    *
   FROM
    todo 
   WHERE
    todo LIKE '%${search_q}%'
    AND priority = '${priority}';`
      break
    case hasStatusProperty(request.query):
      getTodosQuery = `
   SELECT
    *
   FROM
    todo 
   WHERE
    todo LIKE '%${search_q}%'
    AND status = '${status}';`
      break
    default:
      getTodosQuery = `
   SELECT
    *
   FROM
    todo 
   WHERE
    todo LIKE '%${search_q}%';`
  }

  data = await db.all(getTodosQuery)
  response.send(data)
})

//API-2
app.get('/todos/:todoId/', async (request, response) => {
  const {todoId} = request.params
  const getTodoQuery = `
    SELECT
      *
    FROM
      todo
      WHERE
      id = ${todoId};`
  const todo = await db.get(getTodoQuery)
  response.send(todo)
})
//API-3
app.post('/todos/', async (request, response) => {
  const {id, todo, priority, status} = request.body
  const postTODoQuery = `
    INSERT INTO
      todo(id,todo, priority,status)
    VALUES
      (${id}, '${todo}', '${priority}', '${status}');`

  await db.run(postTODoQuery)

  response.send('Todo Successfully Added')
})
//API-4

app.put('/todos/:todoId/', async (request, response) => {
  const {todoId} = request.params
  let updateColumn = ''
  const requestBody = request.body

  switch (true) {
    case requestBody.status != undefined:
      updateColumn = 'Status'
      break

    case requestBody.priority != undefined:
      updateColumn = 'Priority'
      break
    case requestBody.todo != undefined:
      updateColumn = 'Todo'
      break
  }

  const preToDoQuery = `
      select
      *
      from
      todo
      where
      id = ${todoId};`

  const preToDo = await db.get(preToDoQuery)

  const {
    todo = preToDo.todo,
    priority = preToDo.priority,
    status = preToDo.status,
  } = request.body

  const updateToDoQuery = `
  UPDATE
   todo
   SET
    todo='${todo}',
    priority = '${priority}',
    status = '${status}'
    where 
    id = ${todoId};`
  await db.run(updateToDoQuery)

  response.send(`${updateColumn} Updated`)
})

//API-5
app.delete('/todos/:todoId/', async (request, response) => {
  const {todoId} = request.params

  const deleteToDoQuery = `
    DELETE FROM
    todo
    WHERE
      id = ${todoId};`

  await db.run(deleteToDoQuery)

  response.send('Todo Deleted')
})
